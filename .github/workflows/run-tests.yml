name: C++ CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Cache vcpkg dependencies
      uses: actions/cache@v3
      with:
        path: ${{ github.workspace }}/vcpkg_installed
        key: vcpkg-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: |
          vcpkg-${{ runner.os }}-

    - name: Set up vcpkg
      run: git clone https://github.com/microsoft/vcpkg.git
      working-directory: ${{ github.workspace }}

    - name: Bootstrap vcpkg
      run: ./vcpkg/bootstrap-vcpkg.sh
      working-directory: ${{ github.workspace }}
      if: runner.os != 'Windows'

    - name: Bootstrap vcpkg (Windows)
      run: ./vcpkg/bootstrap-vcpkg.bat
      working-directory: ${{ github.workspace }}
      if: runner.os == 'Windows'

    - name: Install dependencies
      run: |
        ./vcpkg/vcpkg install gtest aubio portaudio
      working-directory: ${{ github.workspace }}

    - name: Set up MSBuild (Windows)
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v1

    - name: Configure CMake
      run: |
        cmake -B build -S . -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake"

    - name: Build the project
      run: |
        cmake --build build --config Debug

    - name: Run tests
      run: |
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          ./build/x64/Debug/ScoreGen.Tests.exe
        else
          ./build/x64/Debug/ScoreGen.Tests
        fi
      working-directory: ${{ github.workspace }}
